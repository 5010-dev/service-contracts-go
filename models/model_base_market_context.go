/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BaseMarketContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseMarketContext{}

// BaseMarketContext Base market data operation context with common fields
type BaseMarketContext struct {
	Interval Interval `json:"interval"`
	// Category of the market
	MarketCategory string `json:"marketCategory"`
}

type _BaseMarketContext BaseMarketContext

// NewBaseMarketContext instantiates a new BaseMarketContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseMarketContext(interval Interval, marketCategory string) *BaseMarketContext {
	this := BaseMarketContext{}
	this.Interval = interval
	this.MarketCategory = marketCategory
	return &this
}

// NewBaseMarketContextWithDefaults instantiates a new BaseMarketContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseMarketContextWithDefaults() *BaseMarketContext {
	this := BaseMarketContext{}
	return &this
}

// GetInterval returns the Interval field value
func (o *BaseMarketContext) GetInterval() Interval {
	if o == nil {
		var ret Interval
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *BaseMarketContext) GetIntervalOk() (*Interval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *BaseMarketContext) SetInterval(v Interval) {
	o.Interval = v
}

// GetMarketCategory returns the MarketCategory field value
func (o *BaseMarketContext) GetMarketCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MarketCategory
}

// GetMarketCategoryOk returns a tuple with the MarketCategory field value
// and a boolean to check if the value has been set.
func (o *BaseMarketContext) GetMarketCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarketCategory, true
}

// SetMarketCategory sets field value
func (o *BaseMarketContext) SetMarketCategory(v string) {
	o.MarketCategory = v
}

func (o BaseMarketContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseMarketContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interval"] = o.Interval
	toSerialize["marketCategory"] = o.MarketCategory
	return toSerialize, nil
}

func (o *BaseMarketContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interval",
		"marketCategory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseMarketContext := _BaseMarketContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseMarketContext)

	if err != nil {
		return err
	}

	*o = BaseMarketContext(varBaseMarketContext)

	return err
}

type NullableBaseMarketContext struct {
	value *BaseMarketContext
	isSet bool
}

func (v NullableBaseMarketContext) Get() *BaseMarketContext {
	return v.value
}

func (v *NullableBaseMarketContext) Set(val *BaseMarketContext) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseMarketContext) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseMarketContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseMarketContext(val *BaseMarketContext) *NullableBaseMarketContext {
	return &NullableBaseMarketContext{value: val, isSet: true}
}

func (v NullableBaseMarketContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseMarketContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
