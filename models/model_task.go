/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task Data collection task
type Task struct {
	// Unique task identifier
	Id           string       `json:"id"`
	ExchangeType ExchangeType `json:"exchangeType"`
	Symbol       Symbol       `json:"symbol"`
	Interval     Interval     `json:"interval"`
	TaskType     string       `json:"taskType"`
	// Task priority (higher = more important)
	Priority *int32 `json:"priority,omitempty"`
	// Data limit for collection
	Limit *int32 `json:"limit,omitempty"`
	// Start time for historical/gap tasks
	StartTime NullableTime `json:"startTime,omitempty"`
	// End time for historical/gap tasks
	EndTime     NullableTime `json:"endTime,omitempty"`
	CreatedAt   time.Time    `json:"createdAt"`
	LoadContext *LoadContext `json:"loadContext,omitempty"`
}

type _Task Task

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(id string, exchangeType ExchangeType, symbol Symbol, interval Interval, taskType string, createdAt time.Time) *Task {
	this := Task{}
	this.Id = id
	this.ExchangeType = exchangeType
	this.Symbol = symbol
	this.Interval = interval
	this.TaskType = taskType
	var priority int32 = 1
	this.Priority = &priority
	this.CreatedAt = createdAt
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	var priority int32 = 1
	this.Priority = &priority
	return &this
}

// GetId returns the Id field value
func (o *Task) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Task) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Task) SetId(v string) {
	o.Id = v
}

// GetExchangeType returns the ExchangeType field value
func (o *Task) GetExchangeType() ExchangeType {
	if o == nil {
		var ret ExchangeType
		return ret
	}

	return o.ExchangeType
}

// GetExchangeTypeOk returns a tuple with the ExchangeType field value
// and a boolean to check if the value has been set.
func (o *Task) GetExchangeTypeOk() (*ExchangeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeType, true
}

// SetExchangeType sets field value
func (o *Task) SetExchangeType(v ExchangeType) {
	o.ExchangeType = v
}

// GetSymbol returns the Symbol field value
func (o *Task) GetSymbol() Symbol {
	if o == nil {
		var ret Symbol
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *Task) GetSymbolOk() (*Symbol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *Task) SetSymbol(v Symbol) {
	o.Symbol = v
}

// GetInterval returns the Interval field value
func (o *Task) GetInterval() Interval {
	if o == nil {
		var ret Interval
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *Task) GetIntervalOk() (*Interval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *Task) SetInterval(v Interval) {
	o.Interval = v
}

// GetTaskType returns the TaskType field value
func (o *Task) GetTaskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value
// and a boolean to check if the value has been set.
func (o *Task) GetTaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskType, true
}

// SetTaskType sets field value
func (o *Task) SetTaskType(v string) {
	o.TaskType = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Task) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Task) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *Task) SetPriority(v int32) {
	o.Priority = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Task) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Task) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *Task) SetLimit(v int32) {
	o.Limit = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *Task) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTime and assigns it to the StartTime field.
func (o *Task) SetStartTime(v time.Time) {
	o.StartTime.Set(&v)
}

// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *Task) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *Task) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *Task) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTime and assigns it to the EndTime field.
func (o *Task) SetEndTime(v time.Time) {
	o.EndTime.Set(&v)
}

// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *Task) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *Task) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *Task) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Task) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Task) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLoadContext returns the LoadContext field value if set, zero value otherwise.
func (o *Task) GetLoadContext() LoadContext {
	if o == nil || IsNil(o.LoadContext) {
		var ret LoadContext
		return ret
	}
	return *o.LoadContext
}

// GetLoadContextOk returns a tuple with the LoadContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetLoadContextOk() (*LoadContext, bool) {
	if o == nil || IsNil(o.LoadContext) {
		return nil, false
	}
	return o.LoadContext, true
}

// HasLoadContext returns a boolean if a field has been set.
func (o *Task) HasLoadContext() bool {
	if o != nil && !IsNil(o.LoadContext) {
		return true
	}

	return false
}

// SetLoadContext gets a reference to the given LoadContext and assigns it to the LoadContext field.
func (o *Task) SetLoadContext(v LoadContext) {
	o.LoadContext = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["exchangeType"] = o.ExchangeType
	toSerialize["symbol"] = o.Symbol
	toSerialize["interval"] = o.Interval
	toSerialize["taskType"] = o.TaskType
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.LoadContext) {
		toSerialize["loadContext"] = o.LoadContext
	}
	return toSerialize, nil
}

func (o *Task) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"exchangeType",
		"symbol",
		"interval",
		"taskType",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTask := _Task{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTask)

	if err != nil {
		return err
	}

	*o = Task(varTask)

	return err
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
