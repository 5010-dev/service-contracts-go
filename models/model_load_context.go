/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the LoadContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadContext{}

// LoadContext Context for data loading operations
type LoadContext struct {
	LoadType   string                 `json:"loadType"`
	StartTime  time.Time              `json:"startTime"`
	BatchId    NullableString         `json:"batchId,omitempty"`
	TargetSize NullableInt32          `json:"targetSize,omitempty"`
	Metadata   map[string]interface{} `json:"metadata,omitempty"`
}

type _LoadContext LoadContext

// NewLoadContext instantiates a new LoadContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadContext(loadType string, startTime time.Time) *LoadContext {
	this := LoadContext{}
	this.LoadType = loadType
	this.StartTime = startTime
	return &this
}

// NewLoadContextWithDefaults instantiates a new LoadContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadContextWithDefaults() *LoadContext {
	this := LoadContext{}
	return &this
}

// GetLoadType returns the LoadType field value
func (o *LoadContext) GetLoadType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoadType
}

// GetLoadTypeOk returns a tuple with the LoadType field value
// and a boolean to check if the value has been set.
func (o *LoadContext) GetLoadTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadType, true
}

// SetLoadType sets field value
func (o *LoadContext) SetLoadType(v string) {
	o.LoadType = v
}

// GetStartTime returns the StartTime field value
func (o *LoadContext) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *LoadContext) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *LoadContext) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetBatchId returns the BatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoadContext) GetBatchId() string {
	if o == nil || IsNil(o.BatchId.Get()) {
		var ret string
		return ret
	}
	return *o.BatchId.Get()
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadContext) GetBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchId.Get(), o.BatchId.IsSet()
}

// HasBatchId returns a boolean if a field has been set.
func (o *LoadContext) HasBatchId() bool {
	if o != nil && o.BatchId.IsSet() {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given NullableString and assigns it to the BatchId field.
func (o *LoadContext) SetBatchId(v string) {
	o.BatchId.Set(&v)
}

// SetBatchIdNil sets the value for BatchId to be an explicit nil
func (o *LoadContext) SetBatchIdNil() {
	o.BatchId.Set(nil)
}

// UnsetBatchId ensures that no value is present for BatchId, not even an explicit nil
func (o *LoadContext) UnsetBatchId() {
	o.BatchId.Unset()
}

// GetTargetSize returns the TargetSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoadContext) GetTargetSize() int32 {
	if o == nil || IsNil(o.TargetSize.Get()) {
		var ret int32
		return ret
	}
	return *o.TargetSize.Get()
}

// GetTargetSizeOk returns a tuple with the TargetSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadContext) GetTargetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetSize.Get(), o.TargetSize.IsSet()
}

// HasTargetSize returns a boolean if a field has been set.
func (o *LoadContext) HasTargetSize() bool {
	if o != nil && o.TargetSize.IsSet() {
		return true
	}

	return false
}

// SetTargetSize gets a reference to the given NullableInt32 and assigns it to the TargetSize field.
func (o *LoadContext) SetTargetSize(v int32) {
	o.TargetSize.Set(&v)
}

// SetTargetSizeNil sets the value for TargetSize to be an explicit nil
func (o *LoadContext) SetTargetSizeNil() {
	o.TargetSize.Set(nil)
}

// UnsetTargetSize ensures that no value is present for TargetSize, not even an explicit nil
func (o *LoadContext) UnsetTargetSize() {
	o.TargetSize.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoadContext) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoadContext) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *LoadContext) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *LoadContext) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o LoadContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["loadType"] = o.LoadType
	toSerialize["startTime"] = o.StartTime
	if o.BatchId.IsSet() {
		toSerialize["batchId"] = o.BatchId.Get()
	}
	if o.TargetSize.IsSet() {
		toSerialize["targetSize"] = o.TargetSize.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *LoadContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"loadType",
		"startTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadContext := _LoadContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoadContext)

	if err != nil {
		return err
	}

	*o = LoadContext(varLoadContext)

	return err
}

type NullableLoadContext struct {
	value *LoadContext
	isSet bool
}

func (v NullableLoadContext) Get() *LoadContext {
	return v.value
}

func (v *NullableLoadContext) Set(val *LoadContext) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadContext) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadContext(val *LoadContext) *NullableLoadContext {
	return &NullableLoadContext{value: val, isSet: true}
}

func (v NullableLoadContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
