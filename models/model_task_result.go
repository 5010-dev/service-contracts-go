/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TaskResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskResult{}

// TaskResult Result of task execution
type TaskResult struct {
	TaskId       string                 `json:"taskId"`
	ParentId     NullableString         `json:"parentId,omitempty"`
	ExchangeType ExchangeType           `json:"exchangeType"`
	Symbol       Symbol                 `json:"symbol"`
	Interval     Interval               `json:"interval"`
	TaskType     NullableString         `json:"taskType,omitempty"`
	Completed    bool                   `json:"completed"`
	Error        NullableString         `json:"error,omitempty"`
	Data         map[string]interface{} `json:"data,omitempty"`
	ItemCount    NullableInt32          `json:"itemCount,omitempty"`
	WorkerId     NullableString         `json:"workerId,omitempty"`
	ProcessedAt  time.Time              `json:"processedAt"`
}

type _TaskResult TaskResult

// NewTaskResult instantiates a new TaskResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskResult(taskId string, exchangeType ExchangeType, symbol Symbol, interval Interval, completed bool, processedAt time.Time) *TaskResult {
	this := TaskResult{}
	this.TaskId = taskId
	this.ExchangeType = exchangeType
	this.Symbol = symbol
	this.Interval = interval
	this.Completed = completed
	this.ProcessedAt = processedAt
	return &this
}

// NewTaskResultWithDefaults instantiates a new TaskResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskResultWithDefaults() *TaskResult {
	this := TaskResult{}
	return &this
}

// GetTaskId returns the TaskId field value
func (o *TaskResult) GetTaskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *TaskResult) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *TaskResult) SetTaskId(v string) {
	o.TaskId = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResult) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResult) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *TaskResult) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *TaskResult) SetParentId(v string) {
	o.ParentId.Set(&v)
}

// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *TaskResult) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *TaskResult) UnsetParentId() {
	o.ParentId.Unset()
}

// GetExchangeType returns the ExchangeType field value
func (o *TaskResult) GetExchangeType() ExchangeType {
	if o == nil {
		var ret ExchangeType
		return ret
	}

	return o.ExchangeType
}

// GetExchangeTypeOk returns a tuple with the ExchangeType field value
// and a boolean to check if the value has been set.
func (o *TaskResult) GetExchangeTypeOk() (*ExchangeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeType, true
}

// SetExchangeType sets field value
func (o *TaskResult) SetExchangeType(v ExchangeType) {
	o.ExchangeType = v
}

// GetSymbol returns the Symbol field value
func (o *TaskResult) GetSymbol() Symbol {
	if o == nil {
		var ret Symbol
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TaskResult) GetSymbolOk() (*Symbol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TaskResult) SetSymbol(v Symbol) {
	o.Symbol = v
}

// GetInterval returns the Interval field value
func (o *TaskResult) GetInterval() Interval {
	if o == nil {
		var ret Interval
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *TaskResult) GetIntervalOk() (*Interval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *TaskResult) SetInterval(v Interval) {
	o.Interval = v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResult) GetTaskType() string {
	if o == nil || IsNil(o.TaskType.Get()) {
		var ret string
		return ret
	}
	return *o.TaskType.Get()
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResult) GetTaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskType.Get(), o.TaskType.IsSet()
}

// HasTaskType returns a boolean if a field has been set.
func (o *TaskResult) HasTaskType() bool {
	if o != nil && o.TaskType.IsSet() {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given NullableString and assigns it to the TaskType field.
func (o *TaskResult) SetTaskType(v string) {
	o.TaskType.Set(&v)
}

// SetTaskTypeNil sets the value for TaskType to be an explicit nil
func (o *TaskResult) SetTaskTypeNil() {
	o.TaskType.Set(nil)
}

// UnsetTaskType ensures that no value is present for TaskType, not even an explicit nil
func (o *TaskResult) UnsetTaskType() {
	o.TaskType.Unset()
}

// GetCompleted returns the Completed field value
func (o *TaskResult) GetCompleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *TaskResult) GetCompletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *TaskResult) SetCompleted(v bool) {
	o.Completed = v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResult) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResult) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *TaskResult) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *TaskResult) SetError(v string) {
	o.Error.Set(&v)
}

// SetErrorNil sets the value for Error to be an explicit nil
func (o *TaskResult) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *TaskResult) UnsetError() {
	o.Error.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResult) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResult) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TaskResult) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *TaskResult) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResult) GetItemCount() int32 {
	if o == nil || IsNil(o.ItemCount.Get()) {
		var ret int32
		return ret
	}
	return *o.ItemCount.Get()
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResult) GetItemCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemCount.Get(), o.ItemCount.IsSet()
}

// HasItemCount returns a boolean if a field has been set.
func (o *TaskResult) HasItemCount() bool {
	if o != nil && o.ItemCount.IsSet() {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given NullableInt32 and assigns it to the ItemCount field.
func (o *TaskResult) SetItemCount(v int32) {
	o.ItemCount.Set(&v)
}

// SetItemCountNil sets the value for ItemCount to be an explicit nil
func (o *TaskResult) SetItemCountNil() {
	o.ItemCount.Set(nil)
}

// UnsetItemCount ensures that no value is present for ItemCount, not even an explicit nil
func (o *TaskResult) UnsetItemCount() {
	o.ItemCount.Unset()
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResult) GetWorkerId() string {
	if o == nil || IsNil(o.WorkerId.Get()) {
		var ret string
		return ret
	}
	return *o.WorkerId.Get()
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResult) GetWorkerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkerId.Get(), o.WorkerId.IsSet()
}

// HasWorkerId returns a boolean if a field has been set.
func (o *TaskResult) HasWorkerId() bool {
	if o != nil && o.WorkerId.IsSet() {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given NullableString and assigns it to the WorkerId field.
func (o *TaskResult) SetWorkerId(v string) {
	o.WorkerId.Set(&v)
}

// SetWorkerIdNil sets the value for WorkerId to be an explicit nil
func (o *TaskResult) SetWorkerIdNil() {
	o.WorkerId.Set(nil)
}

// UnsetWorkerId ensures that no value is present for WorkerId, not even an explicit nil
func (o *TaskResult) UnsetWorkerId() {
	o.WorkerId.Unset()
}

// GetProcessedAt returns the ProcessedAt field value
func (o *TaskResult) GetProcessedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ProcessedAt
}

// GetProcessedAtOk returns a tuple with the ProcessedAt field value
// and a boolean to check if the value has been set.
func (o *TaskResult) GetProcessedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessedAt, true
}

// SetProcessedAt sets field value
func (o *TaskResult) SetProcessedAt(v time.Time) {
	o.ProcessedAt = v
}

func (o TaskResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taskId"] = o.TaskId
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	toSerialize["exchangeType"] = o.ExchangeType
	toSerialize["symbol"] = o.Symbol
	toSerialize["interval"] = o.Interval
	if o.TaskType.IsSet() {
		toSerialize["taskType"] = o.TaskType.Get()
	}
	toSerialize["completed"] = o.Completed
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.ItemCount.IsSet() {
		toSerialize["itemCount"] = o.ItemCount.Get()
	}
	if o.WorkerId.IsSet() {
		toSerialize["workerId"] = o.WorkerId.Get()
	}
	toSerialize["processedAt"] = o.ProcessedAt
	return toSerialize, nil
}

func (o *TaskResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taskId",
		"exchangeType",
		"symbol",
		"interval",
		"completed",
		"processedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskResult := _TaskResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskResult)

	if err != nil {
		return err
	}

	*o = TaskResult(varTaskResult)

	return err
}

type NullableTaskResult struct {
	value *TaskResult
	isSet bool
}

func (v NullableTaskResult) Get() *TaskResult {
	return v.value
}

func (v *NullableTaskResult) Set(val *TaskResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskResult(val *TaskResult) *NullableTaskResult {
	return &NullableTaskResult{value: val, isSet: true}
}

func (v NullableTaskResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
