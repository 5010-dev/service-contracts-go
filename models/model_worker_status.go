/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the WorkerStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkerStatus{}

// WorkerStatus struct for WorkerStatus
type WorkerStatus struct {
	Id             string                 `json:"id"`
	Status         string                 `json:"status"`
	ActiveTasks    int32                  `json:"activeTasks"`
	CompletedTasks *int32                 `json:"completedTasks,omitempty"`
	Exchanges      []string               `json:"exchanges"`
	LastSeen       time.Time              `json:"lastSeen"`
	Metadata       map[string]interface{} `json:"metadata,omitempty"`
}

type _WorkerStatus WorkerStatus

// NewWorkerStatus instantiates a new WorkerStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerStatus(id string, status string, activeTasks int32, exchanges []string, lastSeen time.Time) *WorkerStatus {
	this := WorkerStatus{}
	this.Id = id
	this.Status = status
	this.ActiveTasks = activeTasks
	this.Exchanges = exchanges
	this.LastSeen = lastSeen
	return &this
}

// NewWorkerStatusWithDefaults instantiates a new WorkerStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerStatusWithDefaults() *WorkerStatus {
	this := WorkerStatus{}
	return &this
}

// GetId returns the Id field value
func (o *WorkerStatus) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WorkerStatus) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WorkerStatus) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *WorkerStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WorkerStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WorkerStatus) SetStatus(v string) {
	o.Status = v
}

// GetActiveTasks returns the ActiveTasks field value
func (o *WorkerStatus) GetActiveTasks() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActiveTasks
}

// GetActiveTasksOk returns a tuple with the ActiveTasks field value
// and a boolean to check if the value has been set.
func (o *WorkerStatus) GetActiveTasksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveTasks, true
}

// SetActiveTasks sets field value
func (o *WorkerStatus) SetActiveTasks(v int32) {
	o.ActiveTasks = v
}

// GetCompletedTasks returns the CompletedTasks field value if set, zero value otherwise.
func (o *WorkerStatus) GetCompletedTasks() int32 {
	if o == nil || IsNil(o.CompletedTasks) {
		var ret int32
		return ret
	}
	return *o.CompletedTasks
}

// GetCompletedTasksOk returns a tuple with the CompletedTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerStatus) GetCompletedTasksOk() (*int32, bool) {
	if o == nil || IsNil(o.CompletedTasks) {
		return nil, false
	}
	return o.CompletedTasks, true
}

// HasCompletedTasks returns a boolean if a field has been set.
func (o *WorkerStatus) HasCompletedTasks() bool {
	if o != nil && !IsNil(o.CompletedTasks) {
		return true
	}

	return false
}

// SetCompletedTasks gets a reference to the given int32 and assigns it to the CompletedTasks field.
func (o *WorkerStatus) SetCompletedTasks(v int32) {
	o.CompletedTasks = &v
}

// GetExchanges returns the Exchanges field value
func (o *WorkerStatus) GetExchanges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Exchanges
}

// GetExchangesOk returns a tuple with the Exchanges field value
// and a boolean to check if the value has been set.
func (o *WorkerStatus) GetExchangesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Exchanges, true
}

// SetExchanges sets field value
func (o *WorkerStatus) SetExchanges(v []string) {
	o.Exchanges = v
}

// GetLastSeen returns the LastSeen field value
func (o *WorkerStatus) GetLastSeen() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *WorkerStatus) GetLastSeenOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *WorkerStatus) SetLastSeen(v time.Time) {
	o.LastSeen = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkerStatus) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkerStatus) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *WorkerStatus) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *WorkerStatus) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o WorkerStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkerStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["activeTasks"] = o.ActiveTasks
	if !IsNil(o.CompletedTasks) {
		toSerialize["completedTasks"] = o.CompletedTasks
	}
	toSerialize["exchanges"] = o.Exchanges
	toSerialize["lastSeen"] = o.LastSeen
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *WorkerStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"activeTasks",
		"exchanges",
		"lastSeen",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkerStatus := _WorkerStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkerStatus)

	if err != nil {
		return err
	}

	*o = WorkerStatus(varWorkerStatus)

	return err
}

type NullableWorkerStatus struct {
	value *WorkerStatus
	isSet bool
}

func (v NullableWorkerStatus) Get() *WorkerStatus {
	return v.value
}

func (v *NullableWorkerStatus) Set(val *WorkerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerStatus(val *WorkerStatus) *NullableWorkerStatus {
	return &NullableWorkerStatus{value: val, isSet: true}
}

func (v NullableWorkerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
