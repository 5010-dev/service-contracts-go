/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Candle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Candle{}

// Candle Single candlestick data point
type Candle struct {
	// Unix timestamp in milliseconds
	Timestamp int64 `json:"timestamp"`
	// Opening price
	Open float64 `json:"open"`
	// Highest price
	High float64 `json:"high"`
	// Lowest price
	Low float64 `json:"low"`
	// Closing price
	Close float64 `json:"close"`
	// Trading volume
	Volume float64 `json:"volume"`
}

type _Candle Candle

// NewCandle instantiates a new Candle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCandle(timestamp int64, open float64, high float64, low float64, close float64, volume float64) *Candle {
	this := Candle{}
	this.Timestamp = timestamp
	this.Open = open
	this.High = high
	this.Low = low
	this.Close = close
	this.Volume = volume
	return &this
}

// NewCandleWithDefaults instantiates a new Candle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCandleWithDefaults() *Candle {
	this := Candle{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *Candle) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Candle) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Candle) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetOpen returns the Open field value
func (o *Candle) GetOpen() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Open
}

// GetOpenOk returns a tuple with the Open field value
// and a boolean to check if the value has been set.
func (o *Candle) GetOpenOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Open, true
}

// SetOpen sets field value
func (o *Candle) SetOpen(v float64) {
	o.Open = v
}

// GetHigh returns the High field value
func (o *Candle) GetHigh() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.High
}

// GetHighOk returns a tuple with the High field value
// and a boolean to check if the value has been set.
func (o *Candle) GetHighOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.High, true
}

// SetHigh sets field value
func (o *Candle) SetHigh(v float64) {
	o.High = v
}

// GetLow returns the Low field value
func (o *Candle) GetLow() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Low
}

// GetLowOk returns a tuple with the Low field value
// and a boolean to check if the value has been set.
func (o *Candle) GetLowOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Low, true
}

// SetLow sets field value
func (o *Candle) SetLow(v float64) {
	o.Low = v
}

// GetClose returns the Close field value
func (o *Candle) GetClose() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Close
}

// GetCloseOk returns a tuple with the Close field value
// and a boolean to check if the value has been set.
func (o *Candle) GetCloseOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Close, true
}

// SetClose sets field value
func (o *Candle) SetClose(v float64) {
	o.Close = v
}

// GetVolume returns the Volume field value
func (o *Candle) GetVolume() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *Candle) GetVolumeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *Candle) SetVolume(v float64) {
	o.Volume = v
}

func (o Candle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Candle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["open"] = o.Open
	toSerialize["high"] = o.High
	toSerialize["low"] = o.Low
	toSerialize["close"] = o.Close
	toSerialize["volume"] = o.Volume
	return toSerialize, nil
}

func (o *Candle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"open",
		"high",
		"low",
		"close",
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCandle := _Candle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCandle)

	if err != nil {
		return err
	}

	*o = Candle(varCandle)

	return err
}

type NullableCandle struct {
	value *Candle
	isSet bool
}

func (v NullableCandle) Get() *Candle {
	return v.value
}

func (v *NullableCandle) Set(val *Candle) {
	v.value = val
	v.isSet = true
}

func (v NullableCandle) IsSet() bool {
	return v.isSet
}

func (v *NullableCandle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCandle(val *Candle) *NullableCandle {
	return &NullableCandle{value: val, isSet: true}
}

func (v NullableCandle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCandle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
