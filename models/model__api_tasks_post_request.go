/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ApiTasksPostRequest - struct for ApiTasksPostRequest
type ApiTasksPostRequest struct {
	ApiTasksPostRequestOneOf *ApiTasksPostRequestOneOf
	Task                     *Task
}

// ApiTasksPostRequestOneOfAsApiTasksPostRequest is a convenience function that returns ApiTasksPostRequestOneOf wrapped in ApiTasksPostRequest
func ApiTasksPostRequestOneOfAsApiTasksPostRequest(v *ApiTasksPostRequestOneOf) ApiTasksPostRequest {
	return ApiTasksPostRequest{
		ApiTasksPostRequestOneOf: v,
	}
}

// TaskAsApiTasksPostRequest is a convenience function that returns Task wrapped in ApiTasksPostRequest
func TaskAsApiTasksPostRequest(v *Task) ApiTasksPostRequest {
	return ApiTasksPostRequest{
		Task: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiTasksPostRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApiTasksPostRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.ApiTasksPostRequestOneOf)
	if err == nil {
		jsonApiTasksPostRequestOneOf, _ := json.Marshal(dst.ApiTasksPostRequestOneOf)
		if string(jsonApiTasksPostRequestOneOf) == "{}" { // empty struct
			dst.ApiTasksPostRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.ApiTasksPostRequestOneOf); err != nil {
				dst.ApiTasksPostRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApiTasksPostRequestOneOf = nil
	}

	// try to unmarshal data into Task
	err = newStrictDecoder(data).Decode(&dst.Task)
	if err == nil {
		jsonTask, _ := json.Marshal(dst.Task)
		if string(jsonTask) == "{}" { // empty struct
			dst.Task = nil
		} else {
			if err = validator.Validate(dst.Task); err != nil {
				dst.Task = nil
			} else {
				match++
			}
		}
	} else {
		dst.Task = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApiTasksPostRequestOneOf = nil
		dst.Task = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiTasksPostRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiTasksPostRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiTasksPostRequest) MarshalJSON() ([]byte, error) {
	if src.ApiTasksPostRequestOneOf != nil {
		return json.Marshal(&src.ApiTasksPostRequestOneOf)
	}

	if src.Task != nil {
		return json.Marshal(&src.Task)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiTasksPostRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApiTasksPostRequestOneOf != nil {
		return obj.ApiTasksPostRequestOneOf
	}

	if obj.Task != nil {
		return obj.Task
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ApiTasksPostRequest) GetActualInstanceValue() interface{} {
	if obj.ApiTasksPostRequestOneOf != nil {
		return *obj.ApiTasksPostRequestOneOf
	}

	if obj.Task != nil {
		return *obj.Task
	}

	// all schemas are nil
	return nil
}

type NullableApiTasksPostRequest struct {
	value *ApiTasksPostRequest
	isSet bool
}

func (v NullableApiTasksPostRequest) Get() *ApiTasksPostRequest {
	return v.value
}

func (v *NullableApiTasksPostRequest) Set(val *ApiTasksPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTasksPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTasksPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTasksPostRequest(val *ApiTasksPostRequest) *NullableApiTasksPostRequest {
	return &NullableApiTasksPostRequest{value: val, isSet: true}
}

func (v NullableApiTasksPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTasksPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
