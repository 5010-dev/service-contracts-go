/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataUpdateEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataUpdateEvent{}

// DataUpdateEvent struct for DataUpdateEvent
type DataUpdateEvent struct {
	Event     string                 `json:"event"`
	Context   DataUpdateEventContext `json:"context"`
	Metadata  EventMetadata          `json:"metadata"`
	Timestamp int64                  `json:"timestamp"`
}

type _DataUpdateEvent DataUpdateEvent

// NewDataUpdateEvent instantiates a new DataUpdateEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataUpdateEvent(event string, context DataUpdateEventContext, metadata EventMetadata, timestamp int64) *DataUpdateEvent {
	this := DataUpdateEvent{}
	this.Event = event
	this.Context = context
	this.Metadata = metadata
	this.Timestamp = timestamp
	return &this
}

// NewDataUpdateEventWithDefaults instantiates a new DataUpdateEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataUpdateEventWithDefaults() *DataUpdateEvent {
	this := DataUpdateEvent{}
	return &this
}

// GetEvent returns the Event field value
func (o *DataUpdateEvent) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *DataUpdateEvent) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *DataUpdateEvent) SetEvent(v string) {
	o.Event = v
}

// GetContext returns the Context field value
func (o *DataUpdateEvent) GetContext() DataUpdateEventContext {
	if o == nil {
		var ret DataUpdateEventContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *DataUpdateEvent) GetContextOk() (*DataUpdateEventContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *DataUpdateEvent) SetContext(v DataUpdateEventContext) {
	o.Context = v
}

// GetMetadata returns the Metadata field value
func (o *DataUpdateEvent) GetMetadata() EventMetadata {
	if o == nil {
		var ret EventMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *DataUpdateEvent) GetMetadataOk() (*EventMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *DataUpdateEvent) SetMetadata(v EventMetadata) {
	o.Metadata = v
}

// GetTimestamp returns the Timestamp field value
func (o *DataUpdateEvent) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *DataUpdateEvent) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *DataUpdateEvent) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o DataUpdateEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataUpdateEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["context"] = o.Context
	toSerialize["metadata"] = o.Metadata
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *DataUpdateEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
		"context",
		"metadata",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataUpdateEvent := _DataUpdateEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataUpdateEvent)

	if err != nil {
		return err
	}

	*o = DataUpdateEvent(varDataUpdateEvent)

	return err
}

type NullableDataUpdateEvent struct {
	value *DataUpdateEvent
	isSet bool
}

func (v NullableDataUpdateEvent) Get() *DataUpdateEvent {
	return v.value
}

func (v *NullableDataUpdateEvent) Set(val *DataUpdateEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUpdateEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUpdateEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUpdateEvent(val *DataUpdateEvent) *NullableDataUpdateEvent {
	return &NullableDataUpdateEvent{value: val, isSet: true}
}

func (v NullableDataUpdateEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUpdateEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
