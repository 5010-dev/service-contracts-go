/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type DefaultAPI interface {

	/*
		ApiHealthGet Health check

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiHealthGetRequest
	*/
	ApiHealthGet(ctx context.Context) DefaultAPIApiHealthGetRequest

	// ApiHealthGetExecute executes the request
	//  @return ApiHealthGet200Response
	ApiHealthGetExecute(r DefaultAPIApiHealthGetRequest) (*ApiHealthGet200Response, *http.Response, error)

	/*
		ApiTasksPost Submit tasks (single or batch)

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiTasksPostRequest
	*/
	ApiTasksPost(ctx context.Context) DefaultAPIApiTasksPostRequest

	// ApiTasksPostExecute executes the request
	ApiTasksPostExecute(r DefaultAPIApiTasksPostRequest) (*http.Response, error)

	/*
		ApiWorkersHeartbeatPost Send worker heartbeat

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWorkersHeartbeatPostRequest
	*/
	ApiWorkersHeartbeatPost(ctx context.Context) DefaultAPIApiWorkersHeartbeatPostRequest

	// ApiWorkersHeartbeatPostExecute executes the request
	ApiWorkersHeartbeatPostExecute(r DefaultAPIApiWorkersHeartbeatPostRequest) (*http.Response, error)

	/*
		ApiWorkersRegisterPost Register a worker

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWorkersRegisterPostRequest
	*/
	ApiWorkersRegisterPost(ctx context.Context) DefaultAPIApiWorkersRegisterPostRequest

	// ApiWorkersRegisterPostExecute executes the request
	ApiWorkersRegisterPostExecute(r DefaultAPIApiWorkersRegisterPostRequest) (*http.Response, error)

	/*
		ApiWorkersTaskResultPost Submit task result

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiWorkersTaskResultPostRequest
	*/
	ApiWorkersTaskResultPost(ctx context.Context) DefaultAPIApiWorkersTaskResultPostRequest

	// ApiWorkersTaskResultPostExecute executes the request
	ApiWorkersTaskResultPostExecute(r DefaultAPIApiWorkersTaskResultPostRequest) (*http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type DefaultAPIApiHealthGetRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
}

func (r DefaultAPIApiHealthGetRequest) Execute() (*ApiHealthGet200Response, *http.Response, error) {
	return r.ApiService.ApiHealthGetExecute(r)
}

/*
ApiHealthGet Health check

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiHealthGetRequest
*/
func (a *DefaultAPIService) ApiHealthGet(ctx context.Context) DefaultAPIApiHealthGetRequest {
	return DefaultAPIApiHealthGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiHealthGet200Response
func (a *DefaultAPIService) ApiHealthGetExecute(r DefaultAPIApiHealthGetRequest) (*ApiHealthGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiHealthGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiHealthGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/health"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiTasksPostRequest struct {
	ctx                 context.Context
	ApiService          DefaultAPI
	apiTasksPostRequest *ApiTasksPostRequest
}

func (r DefaultAPIApiTasksPostRequest) ApiTasksPostRequest(apiTasksPostRequest ApiTasksPostRequest) DefaultAPIApiTasksPostRequest {
	r.apiTasksPostRequest = &apiTasksPostRequest
	return r
}

func (r DefaultAPIApiTasksPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiTasksPostExecute(r)
}

/*
ApiTasksPost Submit tasks (single or batch)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiTasksPostRequest
*/
func (a *DefaultAPIService) ApiTasksPost(ctx context.Context) DefaultAPIApiTasksPostRequest {
	return DefaultAPIApiTasksPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) ApiTasksPostExecute(r DefaultAPIApiTasksPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiTasksPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiTasksPostRequest == nil {
		return nil, reportError("apiTasksPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiTasksPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIApiWorkersHeartbeatPostRequest struct {
	ctx          context.Context
	ApiService   DefaultAPI
	workerStatus *WorkerStatus
}

func (r DefaultAPIApiWorkersHeartbeatPostRequest) WorkerStatus(workerStatus WorkerStatus) DefaultAPIApiWorkersHeartbeatPostRequest {
	r.workerStatus = &workerStatus
	return r
}

func (r DefaultAPIApiWorkersHeartbeatPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWorkersHeartbeatPostExecute(r)
}

/*
ApiWorkersHeartbeatPost Send worker heartbeat

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWorkersHeartbeatPostRequest
*/
func (a *DefaultAPIService) ApiWorkersHeartbeatPost(ctx context.Context) DefaultAPIApiWorkersHeartbeatPostRequest {
	return DefaultAPIApiWorkersHeartbeatPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) ApiWorkersHeartbeatPostExecute(r DefaultAPIApiWorkersHeartbeatPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiWorkersHeartbeatPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workers/heartbeat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workerStatus == nil {
		return nil, reportError("workerStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workerStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIApiWorkersRegisterPostRequest struct {
	ctx                context.Context
	ApiService         DefaultAPI
	workerRegistration *WorkerRegistration
}

func (r DefaultAPIApiWorkersRegisterPostRequest) WorkerRegistration(workerRegistration WorkerRegistration) DefaultAPIApiWorkersRegisterPostRequest {
	r.workerRegistration = &workerRegistration
	return r
}

func (r DefaultAPIApiWorkersRegisterPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWorkersRegisterPostExecute(r)
}

/*
ApiWorkersRegisterPost Register a worker

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWorkersRegisterPostRequest
*/
func (a *DefaultAPIService) ApiWorkersRegisterPost(ctx context.Context) DefaultAPIApiWorkersRegisterPostRequest {
	return DefaultAPIApiWorkersRegisterPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) ApiWorkersRegisterPostExecute(r DefaultAPIApiWorkersRegisterPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiWorkersRegisterPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workers/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workerRegistration == nil {
		return nil, reportError("workerRegistration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workerRegistration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIApiWorkersTaskResultPostRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	taskResult *TaskResult
}

func (r DefaultAPIApiWorkersTaskResultPostRequest) TaskResult(taskResult TaskResult) DefaultAPIApiWorkersTaskResultPostRequest {
	r.taskResult = &taskResult
	return r
}

func (r DefaultAPIApiWorkersTaskResultPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiWorkersTaskResultPostExecute(r)
}

/*
ApiWorkersTaskResultPost Submit task result

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiWorkersTaskResultPostRequest
*/
func (a *DefaultAPIService) ApiWorkersTaskResultPost(ctx context.Context) DefaultAPIApiWorkersTaskResultPostRequest {
	return DefaultAPIApiWorkersTaskResultPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) ApiWorkersTaskResultPostExecute(r DefaultAPIApiWorkersTaskResultPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiWorkersTaskResultPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workers/task-result"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taskResult == nil {
		return nil, reportError("taskResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taskResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
