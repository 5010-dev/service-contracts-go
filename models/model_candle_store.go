/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CandleStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CandleStore{}

// CandleStore Stored candle data with metadata
type CandleStore struct {
	Candles     []Candle     `json:"candles"`
	LastUpdated NullableTime `json:"lastUpdated,omitempty"`
	NextUpdate  time.Time    `json:"nextUpdate"`
}

type _CandleStore CandleStore

// NewCandleStore instantiates a new CandleStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCandleStore(candles []Candle, nextUpdate time.Time) *CandleStore {
	this := CandleStore{}
	this.Candles = candles
	this.NextUpdate = nextUpdate
	return &this
}

// NewCandleStoreWithDefaults instantiates a new CandleStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCandleStoreWithDefaults() *CandleStore {
	this := CandleStore{}
	return &this
}

// GetCandles returns the Candles field value
func (o *CandleStore) GetCandles() []Candle {
	if o == nil {
		var ret []Candle
		return ret
	}

	return o.Candles
}

// GetCandlesOk returns a tuple with the Candles field value
// and a boolean to check if the value has been set.
func (o *CandleStore) GetCandlesOk() ([]Candle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Candles, true
}

// SetCandles sets field value
func (o *CandleStore) SetCandles(v []Candle) {
	o.Candles = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CandleStore) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CandleStore) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *CandleStore) HasLastUpdated() bool {
	if o != nil && o.LastUpdated.IsSet() {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given NullableTime and assigns it to the LastUpdated field.
func (o *CandleStore) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// SetLastUpdatedNil sets the value for LastUpdated to be an explicit nil
func (o *CandleStore) SetLastUpdatedNil() {
	o.LastUpdated.Set(nil)
}

// UnsetLastUpdated ensures that no value is present for LastUpdated, not even an explicit nil
func (o *CandleStore) UnsetLastUpdated() {
	o.LastUpdated.Unset()
}

// GetNextUpdate returns the NextUpdate field value
func (o *CandleStore) GetNextUpdate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NextUpdate
}

// GetNextUpdateOk returns a tuple with the NextUpdate field value
// and a boolean to check if the value has been set.
func (o *CandleStore) GetNextUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextUpdate, true
}

// SetNextUpdate sets field value
func (o *CandleStore) SetNextUpdate(v time.Time) {
	o.NextUpdate = v
}

func (o CandleStore) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CandleStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["candles"] = o.Candles
	if o.LastUpdated.IsSet() {
		toSerialize["lastUpdated"] = o.LastUpdated.Get()
	}
	toSerialize["nextUpdate"] = o.NextUpdate
	return toSerialize, nil
}

func (o *CandleStore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"candles",
		"nextUpdate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCandleStore := _CandleStore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCandleStore)

	if err != nil {
		return err
	}

	*o = CandleStore(varCandleStore)

	return err
}

type NullableCandleStore struct {
	value *CandleStore
	isSet bool
}

func (v NullableCandleStore) Get() *CandleStore {
	return v.value
}

func (v *NullableCandleStore) Set(val *CandleStore) {
	v.value = val
	v.isSet = true
}

func (v NullableCandleStore) IsSet() bool {
	return v.isSet
}

func (v *NullableCandleStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCandleStore(val *CandleStore) *NullableCandleStore {
	return &NullableCandleStore{value: val, isSet: true}
}

func (v NullableCandleStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCandleStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
