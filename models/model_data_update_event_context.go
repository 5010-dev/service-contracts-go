/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DataUpdateEventContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataUpdateEventContext{}

// DataUpdateEventContext struct for DataUpdateEventContext
type DataUpdateEventContext struct {
	ExchangeType string `json:"exchangeType"`
	Symbol       string `json:"symbol"`
	Interval     string `json:"interval"`
}

type _DataUpdateEventContext DataUpdateEventContext

// NewDataUpdateEventContext instantiates a new DataUpdateEventContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataUpdateEventContext(exchangeType string, symbol string, interval string) *DataUpdateEventContext {
	this := DataUpdateEventContext{}
	this.ExchangeType = exchangeType
	this.Symbol = symbol
	this.Interval = interval
	return &this
}

// NewDataUpdateEventContextWithDefaults instantiates a new DataUpdateEventContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataUpdateEventContextWithDefaults() *DataUpdateEventContext {
	this := DataUpdateEventContext{}
	return &this
}

// GetExchangeType returns the ExchangeType field value
func (o *DataUpdateEventContext) GetExchangeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExchangeType
}

// GetExchangeTypeOk returns a tuple with the ExchangeType field value
// and a boolean to check if the value has been set.
func (o *DataUpdateEventContext) GetExchangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeType, true
}

// SetExchangeType sets field value
func (o *DataUpdateEventContext) SetExchangeType(v string) {
	o.ExchangeType = v
}

// GetSymbol returns the Symbol field value
func (o *DataUpdateEventContext) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *DataUpdateEventContext) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *DataUpdateEventContext) SetSymbol(v string) {
	o.Symbol = v
}

// GetInterval returns the Interval field value
func (o *DataUpdateEventContext) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *DataUpdateEventContext) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *DataUpdateEventContext) SetInterval(v string) {
	o.Interval = v
}

func (o DataUpdateEventContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataUpdateEventContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exchangeType"] = o.ExchangeType
	toSerialize["symbol"] = o.Symbol
	toSerialize["interval"] = o.Interval
	return toSerialize, nil
}

func (o *DataUpdateEventContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exchangeType",
		"symbol",
		"interval",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataUpdateEventContext := _DataUpdateEventContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataUpdateEventContext)

	if err != nil {
		return err
	}

	*o = DataUpdateEventContext(varDataUpdateEventContext)

	return err
}

type NullableDataUpdateEventContext struct {
	value *DataUpdateEventContext
	isSet bool
}

func (v NullableDataUpdateEventContext) Get() *DataUpdateEventContext {
	return v.value
}

func (v *NullableDataUpdateEventContext) Set(val *DataUpdateEventContext) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUpdateEventContext) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUpdateEventContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUpdateEventContext(val *DataUpdateEventContext) *NullableDataUpdateEventContext {
	return &NullableDataUpdateEventContext{value: val, isSet: true}
}

func (v NullableDataUpdateEventContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUpdateEventContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
