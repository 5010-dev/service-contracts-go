/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// Symbol Crypto trading pair symbol
type Symbol string

// List of Symbol
const (
	BTC_USDT Symbol = "BTC-USDT"
	ETH_USDT Symbol = "ETH-USDT"
	SOL_USDT Symbol = "SOL-USDT"
	XRP_USDT Symbol = "XRP-USDT"
)

// All allowed values of Symbol enum
var AllowedSymbolEnumValues = []Symbol{
	"BTC-USDT",
	"ETH-USDT",
	"SOL-USDT",
	"XRP-USDT",
}

func (v *Symbol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Symbol(value)
	for _, existing := range AllowedSymbolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Symbol", value)
}

// NewSymbolFromValue returns a pointer to a valid Symbol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSymbolFromValue(v string) (*Symbol, error) {
	ev := Symbol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Symbol: valid values are %v", v, AllowedSymbolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Symbol) IsValid() bool {
	for _, existing := range AllowedSymbolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Symbol value
func (v Symbol) Ptr() *Symbol {
	return &v
}

type NullableSymbol struct {
	value *Symbol
	isSet bool
}

func (v NullableSymbol) Get() *Symbol {
	return v.value
}

func (v *NullableSymbol) Set(val *Symbol) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbol(val *Symbol) *NullableSymbol {
	return &NullableSymbol{value: val, isSet: true}
}

func (v NullableSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
