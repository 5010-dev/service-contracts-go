/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contracts

import (
	"encoding/json"
	"fmt"
)

// ExchangeType Supported crypto exchange types
type ExchangeType string

// List of ExchangeType
const (
	GATEIO  ExchangeType = "gateio"
	OKX     ExchangeType = "okx"
	BITUNIX ExchangeType = "bitunix"
	MEXC    ExchangeType = "mexc"
)

// All allowed values of ExchangeType enum
var AllowedExchangeTypeEnumValues = []ExchangeType{
	"gateio",
	"okx",
	"bitunix",
	"mexc",
}

func (v *ExchangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExchangeType(value)
	for _, existing := range AllowedExchangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExchangeType", value)
}

// NewExchangeTypeFromValue returns a pointer to a valid ExchangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExchangeTypeFromValue(v string) (*ExchangeType, error) {
	ev := ExchangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExchangeType: valid values are %v", v, AllowedExchangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExchangeType) IsValid() bool {
	for _, existing := range AllowedExchangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExchangeType value
func (v ExchangeType) Ptr() *ExchangeType {
	return &v
}

type NullableExchangeType struct {
	value *ExchangeType
	isSet bool
}

func (v NullableExchangeType) Get() *ExchangeType {
	return v.value
}

func (v *NullableExchangeType) Set(val *ExchangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeType(val *ExchangeType) *NullableExchangeType {
	return &NullableExchangeType{value: val, isSet: true}
}

func (v NullableExchangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
