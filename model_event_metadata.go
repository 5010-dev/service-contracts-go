/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contracts

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMetadata{}

// EventMetadata Metadata for event messages
type EventMetadata struct {
	LoadType       string                 `json:"loadType"`
	DataQuality    map[string]interface{} `json:"dataQuality,omitempty"`
	CompletionRate *float64               `json:"completionRate,omitempty"`
	ItemCount      *int32                 `json:"itemCount,omitempty"`
	// Unix timestamp in milliseconds
	Timestamp int64 `json:"timestamp"`
}

type _EventMetadata EventMetadata

// NewEventMetadata instantiates a new EventMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMetadata(loadType string, timestamp int64) *EventMetadata {
	this := EventMetadata{}
	this.LoadType = loadType
	this.Timestamp = timestamp
	return &this
}

// NewEventMetadataWithDefaults instantiates a new EventMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMetadataWithDefaults() *EventMetadata {
	this := EventMetadata{}
	return &this
}

// GetLoadType returns the LoadType field value
func (o *EventMetadata) GetLoadType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoadType
}

// GetLoadTypeOk returns a tuple with the LoadType field value
// and a boolean to check if the value has been set.
func (o *EventMetadata) GetLoadTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadType, true
}

// SetLoadType sets field value
func (o *EventMetadata) SetLoadType(v string) {
	o.LoadType = v
}

// GetDataQuality returns the DataQuality field value if set, zero value otherwise.
func (o *EventMetadata) GetDataQuality() map[string]interface{} {
	if o == nil || IsNil(o.DataQuality) {
		var ret map[string]interface{}
		return ret
	}
	return o.DataQuality
}

// GetDataQualityOk returns a tuple with the DataQuality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMetadata) GetDataQualityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DataQuality) {
		return map[string]interface{}{}, false
	}
	return o.DataQuality, true
}

// HasDataQuality returns a boolean if a field has been set.
func (o *EventMetadata) HasDataQuality() bool {
	if o != nil && !IsNil(o.DataQuality) {
		return true
	}

	return false
}

// SetDataQuality gets a reference to the given map[string]interface{} and assigns it to the DataQuality field.
func (o *EventMetadata) SetDataQuality(v map[string]interface{}) {
	o.DataQuality = v
}

// GetCompletionRate returns the CompletionRate field value if set, zero value otherwise.
func (o *EventMetadata) GetCompletionRate() float64 {
	if o == nil || IsNil(o.CompletionRate) {
		var ret float64
		return ret
	}
	return *o.CompletionRate
}

// GetCompletionRateOk returns a tuple with the CompletionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMetadata) GetCompletionRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CompletionRate) {
		return nil, false
	}
	return o.CompletionRate, true
}

// HasCompletionRate returns a boolean if a field has been set.
func (o *EventMetadata) HasCompletionRate() bool {
	if o != nil && !IsNil(o.CompletionRate) {
		return true
	}

	return false
}

// SetCompletionRate gets a reference to the given float64 and assigns it to the CompletionRate field.
func (o *EventMetadata) SetCompletionRate(v float64) {
	o.CompletionRate = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *EventMetadata) GetItemCount() int32 {
	if o == nil || IsNil(o.ItemCount) {
		var ret int32
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMetadata) GetItemCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemCount) {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *EventMetadata) HasItemCount() bool {
	if o != nil && !IsNil(o.ItemCount) {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int32 and assigns it to the ItemCount field.
func (o *EventMetadata) SetItemCount(v int32) {
	o.ItemCount = &v
}

// GetTimestamp returns the Timestamp field value
func (o *EventMetadata) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EventMetadata) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventMetadata) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o EventMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["loadType"] = o.LoadType
	if !IsNil(o.DataQuality) {
		toSerialize["dataQuality"] = o.DataQuality
	}
	if !IsNil(o.CompletionRate) {
		toSerialize["completionRate"] = o.CompletionRate
	}
	if !IsNil(o.ItemCount) {
		toSerialize["itemCount"] = o.ItemCount
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *EventMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"loadType",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventMetadata := _EventMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventMetadata)

	if err != nil {
		return err
	}

	*o = EventMetadata(varEventMetadata)

	return err
}

type NullableEventMetadata struct {
	value *EventMetadata
	isSet bool
}

func (v NullableEventMetadata) Get() *EventMetadata {
	return v.value
}

func (v *NullableEventMetadata) Set(val *EventMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMetadata(val *EventMetadata) *NullableEventMetadata {
	return &NullableEventMetadata{value: val, isSet: true}
}

func (v NullableEventMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
