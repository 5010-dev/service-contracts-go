/*
FiftyTen Service Contracts

Common API contracts for FiftyTen microservices

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contracts

import (
	"encoding/json"
	"fmt"
)

// CryptoMarketType Type of crypto market
type CryptoMarketType string

// List of CryptoMarketType
const (
	SPOT      CryptoMarketType = "spot"
	FUTURES   CryptoMarketType = "futures"
	PERPETUAL CryptoMarketType = "perpetual"
)

// All allowed values of CryptoMarketType enum
var AllowedCryptoMarketTypeEnumValues = []CryptoMarketType{
	"spot",
	"futures",
	"perpetual",
}

func (v *CryptoMarketType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CryptoMarketType(value)
	for _, existing := range AllowedCryptoMarketTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CryptoMarketType", value)
}

// NewCryptoMarketTypeFromValue returns a pointer to a valid CryptoMarketType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCryptoMarketTypeFromValue(v string) (*CryptoMarketType, error) {
	ev := CryptoMarketType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CryptoMarketType: valid values are %v", v, AllowedCryptoMarketTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CryptoMarketType) IsValid() bool {
	for _, existing := range AllowedCryptoMarketTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CryptoMarketType value
func (v CryptoMarketType) Ptr() *CryptoMarketType {
	return &v
}

type NullableCryptoMarketType struct {
	value *CryptoMarketType
	isSet bool
}

func (v NullableCryptoMarketType) Get() *CryptoMarketType {
	return v.value
}

func (v *NullableCryptoMarketType) Set(val *CryptoMarketType) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoMarketType) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoMarketType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoMarketType(val *CryptoMarketType) *NullableCryptoMarketType {
	return &NullableCryptoMarketType{value: val, isSet: true}
}

func (v NullableCryptoMarketType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoMarketType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
